# 6.0001 Introduction to Computer Science and Programming in Python：Lecture1—Lecture4
#麻瓜社/技术进阶/MIT技术课程学习

## Lecture 1: what is computation
*Instructor: Dr. Ana Bell*

::computer only do what you tell they to do::

- **Declarative Knowledge** is statements of fact
- **Imperative Knowledge** is a recipe or “how-to”

```
import random
random.randint(1,000) 
```

如何求一个数x的平方根：
	- 随机选择一个数g
	- 如果g*g足够接近x，那么停止计算，将g作为答案；
	- 否则，将g和x/g的平均数作为新数，也就是(g+x/g)/2；
	- 重复这个过程，直到g*g足够接近x

- What is a recipe?
steps
Flow of control
When to stop

- Basic Machine Architecture:
[image:5F5DDF2C-D883-4015-9FBA-F04C68C2EDF6-25599-0001156DE24524E3/F5305869-F78F-4040-BDE4-98AE41AA448B.png]

- **6 Primitives:**
Move right, move left, read, write, scan and do nothing,
[image:837CD5F1-394F-4A31-81BA-FFF8314CBCBE-25599-000115F89F14CE79/CFB7B122-76BB-44E6-B1BD-1B20851D224A.png]

- in python，**all things are objects**
Objects are
	- scalar(cannot be subdivided)
	- non-scalar(have internal structure that can be accessed) 
[image:C30F75EA-CBAE-43C4-AA2C-808C0EA9B19A-25599-000116C8412B85BA/CCFA7485-E539-48E4-A2F0-E32F4EEFDD09.png]

[image:B0890562-19E4-4EA8-948D-2EA98A7EE5BC-25599-000116E64CD12293/F9042D92-2152-405D-AB22-261DB0C2D392.png]

[image:8329E341-9A3F-4A3F-9299-4555B2401159-25599-00011700331ADC51/8D5606A5-FF81-4182-A74A-A5F26C979154.png]

```
〉〉〉type(5)
int
```

- Understand changing bindings:
在Python中，变量仅仅是名称，没有其他任何意义。	
[image:B6070E8F-CEF9-44E4-AF57-6FBD5E62372B-25599-000117847B597BF8/8EA054B9-C3DB-4EF7-9993-597335D53D0F.png]

- 邱奇图灵论题：
如果一个函数是可以计算的，那么一定可以通过对图灵机进行编程实现这种计算。
并非所有问题都可以通过计算求解，比如：图灵就曾经证明，不存在这样的程序，对于给定的任意程序P，当且仅当P永远运行时输出true。

-----
semantically：语义
Primitives：初始函数
scalar： 纯量
peek：窥视
console：安慰，终端
decimal：十进制
radius:半径

----
## Lecture 2: Branching and Iteration
*Instructor: Dr. Ana Bell*

- string
- input(‘’)
- Control Flow：Branching//从另外一个角度看，为什么需要if语句，是因为不可能让程序一直直线运行程序，
	- if、elif、else
- while
- for

`range（start，stop, step）`
[image:57970A5F-4587-46A5-BD1A-6529261BBBEE-573-0000353393ABEC49/ABE706DD-BCCC-4A71-A639-DC0DB988BC4B.png]

- Practice:
编写一个程序，检查3个变量x,y,z，输出其中最大的奇数。如果其中没有奇数，就输出一个消息进行说明。

```python
编写一个程序，检查3个变量x,y,z，输出其中最大的奇数。如果其中没有奇数，就输出一个消息进行说明

x = input('请输入x的值')
y = input('请输入y的值')
z = input('请输入z的值')

old = [int(x),int(y),int(z)]
new = []

for i in old:
    if i%2 != 0:
        new.append(i)

if len(new) != 0:
    print(max(new))
else:
    print('there is no odd number in x,y,z')
```


::特别注意::
```python
x = 4
for j in range(x):
	for i in range(x):
		print(i)
		x = 2
# 这里应该输出什么结果？
```


- practise002
```python
# 假设s是包含多个小数的字符串，由逗号隔开，如：‘1.23,2.4,3.123’。编写一个程序，输出s中所有数值的和。

s = '1.23,2.4,3.123'

s = s + ','
temporary = ''
num = []

for x in s:
    if x != ',':
        temporary = temporary + x
    else:
         num.append(temporary)
         temporary = ''

print(max(num))
```

---
parentheses:括号
lexicographically:字典顺序
plain：平的
indentation:缩紧
increment：增量
tedious：乏味

---
## lecture3: String Manipulation, Guess and Check, Approximations, Bisection
*Instructor: Dr. Ana Bell*

这一章节要理解计算机的穷举思路，以及在穷举思路上产生的更高效的算法，比如二分法和牛顿迭代法。

String：
- len（）can tell the length of the string
- string can index、slice: string[start,end,step]
- **strings are “immutable” - can not be modified

three algorithm:


- 穷举法：（Guess and Check）
通过控制循环，将所有的数值全部穷举一次，这样做在小程序当中无伤大雅，但可能造成资源的浪费。
```python
# 寻找完全立方数的立方根
x = int(input('enter an integer:'))
ans = 0
while ans**3 < abs(x):
	ans = ans + 1
if ans**3 != abs(x):
	print(x, 'is not a perfect cube')
else:
	if x < 0:
		ans = -ans
	print('cube root of ', x, 'is',ans)
```

- Practice003
```python
## 编写一个程序，要求用户输入一个整数，然后输出两个整数root和pwr，满足0 < pwr < 6，并且root**pwr等于用户输入的整数。如果不存在这样一对整数，则输出一条消息进行说明。这个题目貌似有点问题

intger = int(input('请输入一个整数'))

root = 0
pwr = 1

while pwr < 6:
    while root <= intger:
        root = root + 1
        if root**pwr == intger:
            print('root的值是:' + str(root) + 'pwr的值是:' + str(pwr))
    pwr = pwr + 1
    else:
        print('there is no number ')

```

- 牛顿迭代法
[牛顿迭代法_百度百科](https://baike.baidu.com/item/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95/10887580?fr=aladdin)
牛顿找到了一种连续函数求近似值的方法：guess2 = guess - p（guess）/p‘（guess）。**这种方法比二分查找的效率更高，是因为引入了新的信息，降低了不确定性**

Practice004
```python
# 在牛顿-拉夫森法的视线中添加一些代码，跟踪求平方根所用的迭代次数。在这段代码的基础上编写一个程序，比较牛顿-拉夫森法和二分法查找的效率。

def Guess(x):
    epsilon = 0.001
    guess = 0
    guessNum = 0
    while abs(guess * guess - int(x)) >= epsilon and guess <= int(x):
        guess += epsilon
        guessNum += 1
    if abs(guess * guess - int(x)) >= epsilon:
        print('没有找到',x,'的平方根')
    else:
        print(guess,' 是接近于x平方根的一个数')
        print('这是穷举法猜测的第', guessNum, '次')

def Bisection(x):
    epsilon = 0.001
    guessNum = 0
    low = 0
    high = int(x)
    half = (high + low)/ 2.0
    while abs(half * half - int(x)) >= epsilon: # 这里的abs()函数一定要注意，因为可能出现大，也可能出现小
        guessNum += 1
        if half * half < int(x)+ epsilon:
            low = half
        else:
            high = half
        half = (high + low)/2.0
        print(half)
    print(half, ' 是接近于x平方根的一个数')
    print('这是二分法猜测的第', guessNum, '次')

def Newtonsmethod(x):
    epsilon = 0.001
    guess = int(x)/2.0
    guessNum = 0
    while abs(guess * guess - int(x)) >= epsilon:
        guess = guess -(((guess * guess) - int(x))/(2*guess))
        guessNum += 1
    print(guess, ' 是接近于x平方根的一个数')
    print('这是牛顿逼近法猜测的第', guessNum, '次')


x = input('请输入一个正整数') #要注意，input()函数输入的都是str
Guess(x)
Bisection(x)
Newtonsmethod(x)

```

---
intuitive： 直观的
exhaustive enumeration：穷举
epsilon：小量
intimidating:吓人的
decimal：十进制
rigged：非法操纵的

---

## class 4: Decomposition, Abstractions, Functions
*Instructor: Dr. Ana Bell*

一个程序包含的代码越多，就越容易出错，也越难以维护。

- 定义函数：
def name of function(list fo formal parameters)
	body of function
[image:9F49818F-74C3-4A2C-BE82-BA060AF0BE08-10004-0000E727348F1C89/8AF590E0-A03C-4618-AD0F-37691E1643C1.png]

当一个函数被调用时，会执行如下过程：
1. 构成实际参数的表达式被求值，函数的形式参数被绑定到求值结果；
2. 执行点（要执行的下一条指令）从调用点转到函数体的第一句话；
3. 执行函数体中的代码，直至遇到return语句；
4. 这次函数调用的值就是返回值；
5. 执行点移动到紧跟在这次函数调用后面的代码。

- 函数的作用域
```python
def f(x):
	def g():
		x =  'abc'
		print('x =', x)
	def h():
		z = x
		print('z =', z)
	x = x + 1
	print('x = ', x)
	h()
	g()
	print('x = ', x)
	return g

x = 3
z = f(x)
print('x = ', x)
print('z = ', z)
z()
```

all things in Python are Object, even a Function.

对作用域的理解：
1. 在最顶层，有一个符号表会跟踪记录这一层所有的名称定义和它们当前的绑定；；
2. 调用函数时，会建立一个新的符号表（常称为栈帧）。这个表跟踪记录函数中所有的名称定义和它们当前的绑定，如果函数体内又调用了一个函数，就再建立一个栈帧。
3. 函数结束时候，它的栈帧也随之消失

在Python中，你通常会发现，::在函数中只需使用局部变量即可::

**规范**
函数的规范，定义了函数编写者与使用者之间的约定。这个约定一般会包括下面两部分：
- 假设：使用者使用函数时必须满足的前提条件；
- 保证：调用方法满足条件时，函数应当实现的功能；
于是，函数通过**分解和抽象**，大大提高了编程的便捷性：
- 分解实现了程序结构化；
- 抽象隐藏了细节，它允许我们将一段代码当做黑箱使用；
[image:2C0D7619-1A71-4B0A-A3E8-C465EE305C54-10004-0000E68DC9D7D1DA/7A19AAC5-74B7-472B-AD0B-E87BD6FE52E2.png]

Practice005
```python
# 编写一个函数IsIn，接受两个字符串作为参数，如果一个字符串是另一个字符串的一部分，返回True，否则返回False

def IsIn(x,y):
    if (x in y) or (y in x):
        print(True)
    else:
        print(False)

IsIn('abscsa','bc')
IsIn('abscsa','ab')
IsIn('ab','abscsa')
```

----
Decomposition：分解
Mechanisms:机制

